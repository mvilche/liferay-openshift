    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: liferay-openshift-mvilche
    labels:
      template: liferay-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "liferay-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        liferay - OPENSHIFT
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.
      openshift.io/provider-display-name: "Martin Fabrizzio Vilche"
      openshift.io/documentation-url: "https://github.com/mvilche/liferay.git"
      openshift.io/support-url: "https://github.com/mvilche/liferay.git"
  message: >-
    Los servicios iniciar√°n en un par de minutos...
    Martin Fabrizzio Vilche        

  objects:


##################### liferay


  - apiVersion: v1
    data:
      portal-setup-wizard.properties: |-
        admin.email.from.address=test@liferay.com
        admin.email.from.name=Test Test
        company.default.locale=es_ES
        company.default.web.id=liferay.com
        default.admin.email.address.prefix=test
        jdbc.default.driverClassName=org.postgresql.Driver
        jdbc.default.password=liferay
        jdbc.default.url=jdbc:postgresql://postgresql:5432/liferay
        jdbc.default.username=liferay
        liferay.home=/opt/liferay
        setup.wizard.enabled=false
    kind: ConfigMap
    metadata:
      name: liferay

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: liferay-community
      name: liferay
    spec:
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: ajp
          port: 8009
          protocol: TCP
          targetPort: 8009          
      selector:
        app: liferay-community
        deploymentconfig: liferay
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: liferay-community
      name: liferay
    spec:
      port:
        targetPort: http
      to:
        kind: Service
        name: liferay
        weight: 100
      wildcardPolicy: None




  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: liferay-community
      name: "liferay"
    spec:
      replicas: 1
      initContainers:
      - name: wait-postgres
        image: busybox:latest
        command: ['sh', '-c', 'until nslookup postgresql; do echo waiting for postgresql; sleep 2; done;']        
      revisionHistoryLimit: 10
      selector:
        app: liferay-community
        deploymentconfig: liferay
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: liferay-community
            deploymentconfig: liferay
        spec:        
          containers:
            - env:
                - name: TIMEZONE
                  value: America/Montevideo
              image: "liferay:latest"
              imagePullPolicy: Always
              name: liferay
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8080
                  path: /
                timeoutSeconds: 15
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                httpGet:
                  port: 8080
                  path: /
                timeoutSeconds: 15              
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/liferay/custom_config
                  name: liferay       
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8009
                  protocol: TCP                           
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30          
          volumes:
            - configMap:
                name: liferay
              name: liferay       
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - liferay
            from:
              kind: ImageStreamTag
              name: "liferay:latest"
          type: ImageChange

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: liferay-community
      name: postgresql
    spec:
      replicas: 1
      selector:
        app: liferay-community
        deploymentconfig: postgresql
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: liferay-community
            deploymentconfig: postgresql
        spec:
          containers:
            - env:
                - name: POSTGRESQL_USER
                  value: liferay
                - name: POSTGRESQL_PASSWORD
                  value: liferay
                - name: POSTGRESQL_DATABASE
                  value: liferay
              image: postgresql:10
              imagePullPolicy: Always
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                  - /bin/sh
                  - -i
                  - -c
                  - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              livenessProbe:
                exec:
                  command:
                  - /bin/sh
                  - -i
                  - -c
                  - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1                
              resources:
                limits:
                  cpu: 1000m
                  memory: 512Mi
                requests:
                  cpu: 500m
                  memory: 256Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: postgresql-1
                  subPath: postgresql
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: postgresql-1
              persistentVolumeClaim:
                claimName: liferay-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: 'postgresql:10'
          type: ImageChange



  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: liferay-community
      name: postgresql
    spec:
      ports:
        - name: tcp
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: liferay-community
        deploymentconfig: postgresql
      sessionAffinity: None
      type: ClusterIP



  - apiVersion: v1
    kind: ImageStream
    metadata:
        name: postgresql
    spec:
        tags:
          - name: '10'
            from:
                kind: DockerImage
                name: centos/postgresql-10-centos7:latest



  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: liferay-community
      name: liferay
    spec:
      completionDeadlineSeconds: 1800
      output:
        to:
          kind: ImageStreamTag
          name: liferay:latest
      source:
        contextDir: .
        git:
          ref: master
          uri: 'https://github.com/mvilche/liferay-openshift.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
      triggers:
        - type: "ConfigChange"


  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: liferay-community
      name: liferay
    spec: {}


  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
      - kubernetes.io/pvc-protection
      name: liferay-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi

